import torch
import torch.nn as nn
class batch_normalization(nn.Module):
    def __init__(self,num_features, eps = 1e-5, momentum = 0.1):
        super(batch_normalization,self).__init__()
        self.num_features = num_features
        self.eps = eps
        self.momentum = momentum
        
        self.gamma = nn.parameter(torch.ones(num_features))
        self.beta = nn.parameter(torch.zeros(num_features))

        # 初始化运行时均值和方差
        self.register_buffer('running_mean', torch.zeros(num_features))
        self.register_buffer('running_var', torch.ones(num_features))

    def forward(self, x):
        if self.training:
            mean = x.mean(dim = 0)
            var = x.var(dim = 0, unbiased = False)

            # 更新运行时均值和方差
            self.running_mean = (1 - self.momentum) * self.running_mean + self.momentum*mean
            self.running_var =  (1 - self.momentum) * self.running_var + self.momentum*var
        else:
            mean = self.running_mean
            var = self.running_var

        normalized_x = (x - mean) / torch.sqrt(var + self.eps)
        output = self.gamma * normalized_x + self.beta
        
        return output
    
