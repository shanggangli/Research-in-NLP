import torch
import torch.nn as nn
class layer_normalization(nn.modules):
    def __init__(self,hidden_size, eps = 1e-6):
        super(layer_normalization,self).__init__()
        self.hidden_size = hidden_size
        self.eps = eps
        self.gamma = nn.parameter(torch.ones(hidden_size))
        self.beta = nn.parameter(torch.zeros(hidden_size))

        
    def forward(self,x):
        mean = x.mean(dim = -1, keepdim = True)
        print(mean.size())
        std = x.std(dim = -1,keepdim=True, unbiased=False)
        normalized_x = (x-mean)/(std + self.eps)
        output = self.gamma*normalized_x + self.beta
        return output
